/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
	return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function(float){

	var bdfloat = float.slice();

	for (i = 0; i < float.length; i++) {
		float[i] = float[i] * 2;
	}

	for (i = 0; i < float.length; i++) {
		if ( (float[i] / 2) != bdfloat[i] ){
			return false;
			break;
		}
		else
			return true;
			break;
	}
}
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
    this.hash = hash;
    this.date = date;
    this.message = message;
}

/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(logArray) {

	var logArr = new Array(logArray.length);

	var singleLog = new Array();
	var chArr = new Array();
	var str_Hash = new Array();
	var str_Date = new Array();
	var str_Message = new Array();



	for (var i = 0; i < logArray.length; i++) {
		singleLog = logArray[i];

		for (var z = 0 ; z < singleLog.length; z++) {
			chArr[z] = singleLog[z];
		}

		str_Hash = chArr.splice(0, 7);
		str_Date = chArr.splice(1, 30);
		str_Message = chArr.splice(3, chArr.length - 1);

		str_Message.splice(str_Message.length - 1, 1);

		str_Hash = str_Hash.join("");
		str_Date = str_Date.join("");
		str_Message = str_Message.join("");

		var date_Date = new Date(str_Date);

		logArr[i] = {hash: str_Hash, date: date_Date, message: str_Message};
	}

	return logArr;
}
//end your code
